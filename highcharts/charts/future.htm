<!DOCTYPE html>
<html>
<head>
      <meta charset=utf-8>
      <script type="text/javascript" src='http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js'></script>
      <script type="text/javascript" src="js/highcharts.js"></script>
      <script type="text/javascript" src="js/exporting.js"></script>
</head>
<body>
<div id='container' style="min-width: 300px; height: 600px; margin: 0 auto"></div>

<script type="text/javascript">

var chart;
var task;
var bugDate;
var taskPoint;
var bugPoint;
var maxLen;
var options =
{
	// 出力先を指定
	chart :
	{
		type: 'column',
		renderTo : "container"
	},
	// タイトルを指定
	title : {text: "Future chart (velocity)"},
	subtitle: { text: 'Source: Redmine'},
	// x軸のラベルを指定
	plotOptions:
	{
            column: {
                stacking: 'normal',
                dataLabels: {
                    enabled: true,
                    color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'white',
                    style: {
                        textShadow: '0 0 3px black'
                    }
                }
            }
	},
	tooltip: 
	{
            formatter: function () {
                return '<b>' + this.x + '</b><br/>' +
                    this.series.name + ': ' + this.y + '<br/>' +
                    'Total: ' + this.point.stackTotal;
            }
	},
	xAxis :
	{
		title: { text: "count" },
		crosshair: true
	},
	yAxis : {title: {text: "tickets"},
                   stackLabels: {
                enabled: true,
                style: {
                    fontWeight: 'bold',
                    color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'
                }
    	}
	}
}

function draw() {
	jQuery.get("bug-futuredates.csv", function(content) {
		bugDate = content.split(",");
		TaskData()
	});
}

function TaskData() {
	jQuery.get("task-futuredates.csv", function(content) 
	{
		content = content.split(",");
		var dates;
		if ( content.length > bugDate.length )
		{
			dates = content;
		}
		else
		{
			dates = bugDate;
		}
		maxLen = dates.length;
		if ( maxLen >= 20 )
		{
			maxLen = 20;
		}
		taskPoint = new Array(maxLen);
		bugPoint = new Array(maxLen);
		for ( var i = 0 ; i < maxLen ; i ++ )
		{
			taskPoint[i] = bugPoint[i] = 0;
		}
		options['xAxis'] = [{ categories: dates,labels: {
			rotation: 90,
			style: {
				fontSize: '10px',
				fontFamily: 'Verdana, sans-serif'
			}}}]
		BugPoint()
	});
}

function BugPoint() {
	jQuery.get("bug-futurepoint.csv", function(content) {
		content = content.split(",");
		var len = content.length;
		if ( len > maxLen )
		{
			len = maxLen;
		}
		for( var i=0; i<len; i++)
		{
			bugPoint[i] = Math.round(Number(content[i]));
		}
		TaskPoint();
	});
}

function TaskPoint() {
	jQuery.get("task-futurepoint.csv", function(content) {
		content = content.split(",");
		var len = content.length;
		if ( len > maxLen )
		{
			len = maxLen;
		}
		for( var i=0; i<len; i++)
		{
			taskPoint[i] = Math.round(Number(content[i]));
		}
		options['series'] = [{
			name: "Tasks", data: taskPoint,
		},{
			name: "Bugs", data: bugPoint
		}]
		chart = new Highcharts.Chart(options);
	});
}

// ページがロードされた後に、グラフを出力する
document.body.onload = draw();

</script>

</body>
</html>
